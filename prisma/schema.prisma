// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  username        String
  password        String
  gender          Gender
  country         String
  role            Role              @default(USER)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sessions        Session[]
  Room            Room[]            @relation("RoomUsers")
  RoomParticipant RoomParticipant[]
  Rooms           Room[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  USER
  ADMIN
}

model Room {
  id           String            @id @default(uuid())
  name         String
  isPrivate    Boolean
  roomLimit    Int?
  createdBy    String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [createdBy], references: [id])
  participants RoomParticipant[]
  roomCode     RoomCode?

  User User[] @relation("RoomUsers")
}

model RoomParticipant {
  id       String   @id @default(uuid())
  userId   String
  roomId   String
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())
}

model RoomCode {
  id        String   @id @default(uuid())
  code      String   @unique
  expiresAt DateTime
  roomId    String   @unique
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
}

model Question {
  id         String   @id @default(uuid())
  content    String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
